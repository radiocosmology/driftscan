## This is the configuration file for specifying what analysis products will be generated.
## There isn't great documentation. Essentially in the code, any class with an attribute
## set as config.Property will attempt to set that attribute from the correct section of
## the config file.

## The main section for configuring what will be run.
config:
    ## Actions to perform
    beamtransfers:      Yes                     # Calculate beamtransfers?
    kltransform:        Yes                     # Find KL-modes of telescope?
    psfisher:           Yes                     # Estimate power spectrum errors

    ## Directory to store output in/
    output_directory:   "testdir"

    polsvcut:           1.0

    ## Cluster configuration (ignored unless on a cluster)
    ## This section is interpreted by mkjob_simulate.py to work out the job
    ## configuration when run on a cluster.
    name:               kljob1                  # PBS jobname
    nodes:              20                      # Number of nodes to run on
    pernode:            1                       # Processes per node
    time:               8:00:00                 # Time to run for (in HH:MM:SS)
    ompnum:             8                       # Number of OpenMP threads
    ppn:                8                       # Processors to require per node
    queue:              batch                   # If set, submit to an alternative queue (e.g debug)


## Configure telescope object:
## This is where you define all the parameters of the telescope that
## you want to generate the analysis products for.
telescope:
    # Type of telescope to use (this must be supported in simulate.py)
    type:               PolarisedCylinder

    # Frequency channels (common to all telescope types)
    num_freq:           8
    freq_start:         400.0
    freq_end:           450.0
    freq_mode:          edge

    # Setup class specific parameters (in this case defining the cylinder layout)
    num_cylinders:      2
    cylinder_width:     5.0
    num_feeds:          5
    feed_spacing:       0.5

    tsys:               1.0


## KL transform configuration
## Set up the KL-filters that will be generated (there can be multiple ones as listed below).
kltransform:
    # List of each transform to perform
    -   type:           KLTransform             # Type of KL transform
        name:           kl                      # Name of KL transform object (used for later referencing)
        use_thermal:    Yes
        use_foregrounds: No

    -   type:           DoubleKL
        name:           dk

## PS Estimator configuration
## Set up the PS Estimators that will be generated.
psfisher:
    -   type:           MonteCarlo
        name:           ps1
        klname:         kl                      # Must be the same as one of the names in the kltransform section above.
        k_bands:
        ## This is slightly complicated. The sections below are interpreted
        ##in the obvious manner to create a range of bins, starting and ending
        ## at the specified values with the given number of bins.
        ##
        ## Multiple items get concatenated together. For instance the section
        ## below means that we start with linearly spaced bins, and the end with
        ## log-spaced.
        -   spacing:    linear                  # Linear spacing
            start:      0.0                     # Start k-value
            stop:       0.25                    # End k-value
            num:        3                       # Number of bins

    -   type:           MonteCarlo
        name:           ps2
        klname:         dk
        k_bands:
        -   spacing:    linear
            start:      0.0
            stop:       0.25
            num:        3

        num_theta:      2

